// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo.proto

package echo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoRequest struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_echo_6ef4ffaa9b0e5737, []int{0}
}
func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (dst *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(dst, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type EchoResponse struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	UnixTime             int64    `protobuf:"varint,2,opt,name=unix_time,json=unixTime,proto3" json:"unix_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoResponse) Reset()         { *m = EchoResponse{} }
func (m *EchoResponse) String() string { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()    {}
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_echo_6ef4ffaa9b0e5737, []int{1}
}
func (m *EchoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoResponse.Unmarshal(m, b)
}
func (m *EchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoResponse.Marshal(b, m, deterministic)
}
func (dst *EchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResponse.Merge(dst, src)
}
func (m *EchoResponse) XXX_Size() int {
	return xxx_messageInfo_EchoResponse.Size(m)
}
func (m *EchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResponse proto.InternalMessageInfo

func (m *EchoResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *EchoResponse) GetUnixTime() int64 {
	if m != nil {
		return m.UnixTime
	}
	return 0
}

type OtherRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OtherRequest) Reset()         { *m = OtherRequest{} }
func (m *OtherRequest) String() string { return proto.CompactTextString(m) }
func (*OtherRequest) ProtoMessage()    {}
func (*OtherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_echo_6ef4ffaa9b0e5737, []int{2}
}
func (m *OtherRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OtherRequest.Unmarshal(m, b)
}
func (m *OtherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OtherRequest.Marshal(b, m, deterministic)
}
func (dst *OtherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtherRequest.Merge(dst, src)
}
func (m *OtherRequest) XXX_Size() int {
	return xxx_messageInfo_OtherRequest.Size(m)
}
func (m *OtherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OtherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OtherRequest proto.InternalMessageInfo

func (m *OtherRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OtherRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type OtherResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OtherResponse) Reset()         { *m = OtherResponse{} }
func (m *OtherResponse) String() string { return proto.CompactTextString(m) }
func (*OtherResponse) ProtoMessage()    {}
func (*OtherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_echo_6ef4ffaa9b0e5737, []int{3}
}
func (m *OtherResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OtherResponse.Unmarshal(m, b)
}
func (m *OtherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OtherResponse.Marshal(b, m, deterministic)
}
func (dst *OtherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtherResponse.Merge(dst, src)
}
func (m *OtherResponse) XXX_Size() int {
	return xxx_messageInfo_OtherResponse.Size(m)
}
func (m *OtherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OtherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OtherResponse proto.InternalMessageInfo

func (m *OtherResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "echo.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "echo.EchoResponse")
	proto.RegisterType((*OtherRequest)(nil), "echo.OtherRequest")
	proto.RegisterType((*OtherResponse)(nil), "echo.OtherResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	Other(ctx context.Context, in *OtherRequest, opts ...grpc.CallOption) (*OtherResponse, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/echo.Echo/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) Other(ctx context.Context, in *OtherRequest, opts ...grpc.CallOption) (*OtherResponse, error) {
	out := new(OtherResponse)
	err := c.cc.Invoke(ctx, "/echo.Echo/Other", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	Other(context.Context, *OtherRequest) (*OtherResponse, error)
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.Echo/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_Other_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Other(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.Echo/Other",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Other(ctx, req.(*OtherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echo.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Echo_Echo_Handler,
		},
		{
			MethodName: "Other",
			Handler:    _Echo_Other_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "echo.proto",
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor_echo_6ef4ffaa9b0e5737) }

var fileDescriptor_echo_6ef4ffaa9b0e5737 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x4f, 0x4f, 0x84, 0x30,
	0x10, 0xc5, 0xe5, 0x9f, 0xc2, 0x88, 0x46, 0xc7, 0x0b, 0xc1, 0x83, 0xa4, 0x27, 0xbc, 0x60, 0x82,
	0x67, 0x8f, 0x9e, 0x4d, 0x1a, 0xef, 0x46, 0xcb, 0x44, 0x1a, 0x03, 0x45, 0x5a, 0x92, 0xfd, 0xf8,
	0x9b, 0x96, 0x92, 0xb0, 0xd9, 0x53, 0x5f, 0x5f, 0xe7, 0xd7, 0x37, 0x33, 0x00, 0x24, 0x7a, 0xd5,
	0x4c, 0xb3, 0x32, 0x0a, 0x63, 0xab, 0xd9, 0x13, 0x5c, 0xbf, 0x8b, 0x5e, 0x71, 0xfa, 0x5f, 0x48,
	0x1b, 0xbc, 0x83, 0x68, 0xd0, 0xbf, 0x45, 0x50, 0x05, 0x75, 0xc6, 0xad, 0x64, 0x6f, 0x90, 0xaf,
	0x05, 0x7a, 0x52, 0xa3, 0xa6, 0xf3, 0x0a, 0x7c, 0x84, 0x6c, 0x19, 0xe5, 0xe1, 0xcb, 0xc8, 0x81,
	0x8a, 0xb0, 0x0a, 0xea, 0x88, 0xa7, 0xd6, 0xf8, 0x94, 0x03, 0xb1, 0x16, 0xf2, 0x0f, 0xd3, 0xd3,
	0xbc, 0x05, 0xdc, 0x42, 0x28, 0x3b, 0x47, 0x27, 0x3c, 0x94, 0x1d, 0x22, 0xc4, 0xe3, 0xb7, 0xe7,
	0x32, 0xee, 0x34, 0x7b, 0x86, 0x1b, 0xcf, 0xf8, 0xcc, 0x02, 0xae, 0xf4, 0x22, 0x04, 0x69, 0xed,
	0xc8, 0x94, 0x6f, 0xd7, 0xf6, 0x0f, 0x62, 0xdb, 0x1d, 0xbe, 0xf8, 0xf3, 0xbe, 0x71, 0x13, 0xee,
	0x46, 0x2a, 0x71, 0x6f, 0xad, 0x1f, 0xb2, 0x0b, 0x6c, 0x21, 0x71, 0x19, 0xe8, 0x9f, 0xf7, 0x4d,
	0x96, 0x0f, 0x27, 0xde, 0xc6, 0xfc, 0x5c, 0xba, 0xc5, 0xbd, 0x1e, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x50, 0x89, 0x13, 0x2b, 0x46, 0x01, 0x00, 0x00,
}
